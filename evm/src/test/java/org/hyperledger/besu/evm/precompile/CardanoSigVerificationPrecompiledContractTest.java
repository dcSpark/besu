/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
package org.hyperledger.besu.evm.precompile;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;

import org.hyperledger.besu.evm.frame.MessageFrame;
import org.hyperledger.besu.evm.gascalculator.FrontierGasCalculator;

import org.apache.tuweni.bytes.Bytes;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

@RunWith(Parameterized.class)
public class CardanoSigVerificationPrecompiledContractTest {
  private final CardanoSigVerificationPrecompiledContract contract =
      new CardanoSigVerificationPrecompiledContract(new FrontierGasCalculator());

  public CardanoSigVerificationPrecompiledContractTest() {}

  private final MessageFrame messageFrame = mock(MessageFrame.class);

  @Parameterized.Parameters
  public static Object[][] parameters() {
    return new Object[][] {
      {
        // verify(bytes,bytes) with correct signature
        "f7e83aee000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000099845846a201276761646472657373583900eeb15a1bf1e1f42481e6d1978187b7a29122bcffb0f0bb96a68c6746b5a38076729b8fc0e1e77f5fb23e2e59d974a50279a9b0451c1ce2dfa166686173686564f444ff0102035840a37db2cbdb23ef2b1e6d67d56d31afd73d246521081baed8b55302dfe843c2c97a1a18f7c311890ebd662c3bde6ae99722db4927fe94ba20746cf25730311d0b00000000000000000000000000000000000000000000000000000000000000000000000000002aa4010103272006215820367b125ce4df0b28a06b8dd66155c09a5137e8aa9b7686b77ded56675b08447900000000000000000000000000000000000000000000",
        "0000000000000000000000000000000000000000000000000000000000000001",
        1_000L
      },
      {
        // verify(bytes,bytes) with incorrect signature
        "f7e83aee000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000099845846a201276761646472657373583900eeb15a1bf1e1f42481e6d1978187b7a29122bcffb0f0bb96a68c6746b5a38076729b8fc0e1e77f5fb23e2e59d974a50279a9b0451c1ce2dfa166686173686564f444ff0102035840a37db2cbdb23ef2b1e6d67d56d31afd73d241521081baed8b55302dfe843c2c97a1a18f7c311890ebd662c3bde6ae99722db4927fe94ba20746cf25730311d0b00000000000000000000000000000000000000000000000000000000000000000000000000002aa4010103272006215820367b125ce4df0b28a06b8dd66155c09a5137e8aa9b7686b77ded56675b08447900000000000000000000000000000000000000000000",
        "0000000000000000000000000000000000000000000000000000000000000000",
        1_000L
      },
      {
        // verify(bytes,bytes) with invalid public key
        "f7e83aee000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000099845846a201276761646472657373583900eeb15a1bf1e1f42481e6d1978187b7a29122bcffb0f0bb96a68c6746b5a38076729b8fc0e1e77f5fb23e2e59d974a50279a9b0451c1ce2dfa166686173686564f444ff0102035840a37db2cbdb23ef2b1e6d67d56d31afd73d241521081baed8b55302dfe843c2c97a1a18f7c311890ebd662c3bde6ae99722db4927fe94ba20746cf25730311d0b00000000000000000000000000000000000000000000000000000000000000000000000000002aa4010103272006215820367b125ce4df0b28a06b8dd66155c01a5137e8aa9b7686b77ded56675b08447900000000000000000000000000000000000000000000",
        "08c379a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000050636f6d2e626c6f786265616e2e63617264616e6f2e636c69656e742e63727970746f2e43727970746f457863657074696f6e3a205369676e617475726520766572696669636174696f6e206572726f7200000000000000000000000000000000",
        1_000L
      },
      {
        // getPayloadFromSign1(bytes)
        "07a5566f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000099845846a201276761646472657373583900eeb15a1bf1e1f42481e6d1978187b7a29122bcffb0f0bb96a68c6746b5a38076729b8fc0e1e77f5fb23e2e59d974a50279a9b0451c1ce2dfa166686173686564f444ff0102035840a37db2cbdb23ef2b1e6d67d56d31afd73d246521081baed8b55302dfe843c2c97a1a18f7c311890ebd662c3bde6ae99722db4927fe94ba20746cf25730311d0b00000000000000",
        "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004ff01020300000000000000000000000000000000000000000000000000000000",
        1_000L
      },
      {
        // getBech32AddressFromSign1(bytes)
        "b8c561f700000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000099845846a201276761646472657373583900eeb15a1bf1e1f42481e6d1978187b7a29122bcffb0f0bb96a68c6746b5a38076729b8fc0e1e77f5fb23e2e59d974a50279a9b0451c1ce2dfa166686173686564f444ff0102035840a37db2cbdb23ef2b1e6d67d56d31afd73d246521081baed8b55302dfe843c2c97a1a18f7c311890ebd662c3bde6ae99722db4927fe94ba20746cf25730311d0b00000000000000",
        "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000006c616464725f7465737431717268747a6b736d3738736c67667970756d6765307176386b3733667a6734756c3763307077756b3536787877333434357771387675356d336c717772656d6c7437657275746a656d39363232716e653478637932387175757430736d6730636b680000000000000000000000000000000000000000",
        1_000L
      },
      {
        // incorrect signature -> Error("Invalid function signature")
        "ffffffff",
        "08c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001a496e76616c69642066756e6374696f6e207369676e6174757265000000000000",
        1_000L
      },
      {
        // Invalid CBOR -> Error("com.bloxbean.cardano.client.exception.CborRuntimeException:
        // De-serialization error.")
        "f7e83aee000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000099a45846a201276761646472657373583900eeb15a1bf1e1f42481e6d1978187b7a29122bcffb0f0bb96a68c6746b5a38076729b8fc0e1e77f5fb23e2e59d974a50279a9b0451c1ce2dfa166686173686564f444ff0102035840a37db2cbdb23ef2b1e6d67d56d31afd73d246521081baed8b55302dfe843c2c97a1a18f7c311890ebd662c3bde6ae99722db4927fe94ba20746cf25730311d0b00000000000000000000000000000000000000000000000000000000000000000000000000002aa4010103272006215820367b125ce4df0b28a06b8dd66155c09a5137e8aa9b7686b77ded56675b08447900000000000000000000000000000000000000000000",
        "08c379a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000053636f6d2e626c6f786265616e2e63617264616e6f2e636c69656e742e657863657074696f6e2e43626f7252756e74696d65457863657074696f6e3a2044652d73657269616c697a6174696f6e206572726f722e00000000000000000000000000",
        1_000L
      },
    };
  }

  @Parameterized.Parameter public String input;

  @Parameterized.Parameter(1)
  public String expectedResult;

  @Parameterized.Parameter(2)
  public long expectedGasUsed;

  @Test
  public void testPrecompiledContract() {
    final Bytes input = Bytes.fromHexString(this.input);
    final Bytes expectedComputation =
        expectedResult == null ? null : Bytes.fromHexString(expectedResult);
    assertThat(contract.compute(input, messageFrame)).isEqualTo(expectedComputation);
    assertThat(contract.gasRequirement(input)).isEqualTo(expectedGasUsed);
  }
}
